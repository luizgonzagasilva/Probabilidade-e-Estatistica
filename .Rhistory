J2 = c(j2_Alpha, j2_Lambda, j2_Phi, j2_Pi)
J3 = c(j3_Alpha, j3_Lambda, j3_Phi, j3_Pi)
J4 = c(j4_Alpha, j4_Lambda, j4_Phi, j4_Pi)
J = rbind(J1, J2, J3, J4)
y = solve(J,-F)
x = x + y
# ----------------------   1. Base Geral    ---------------
#                                                         #
dados =  read_delim("Bases/PANCAN_clinicalMatrix", "\t", escape_double = FALSE, trim_ws = TRUE)
nrow(dados)
length(names(dados))
# Remove paper publication data
dados[c('_PANCAN_CNA_PANCAN_K8',
'_PANCAN_Cluster_Cluster_PANCAN',
'_PANCAN_DNAMethyl_PANCAN',
'_PANCAN_RPPA_PANCAN_K8',
'_PANCAN_UNC_RNAseq_PANCAN_K16',
'_PANCAN_miRNA_PANCAN',
'_PANCAN_mutation_PANCAN')] <- NULL
# Remove IDÃÂ´s relation with other datasets
dados[c('_GENOMIC_ID_TCGA_PANCAN_gistic2',
'_GENOMIC_ID_TCGA_PANCAN_paradigm',
'_GENOMIC_ID_TCGA_PANCAN_mutation_bcmgenelevel',
'_GENOMIC_ID_TCGA_PANCAN_miRNA_HiSeq_gene',
'_GENOMIC_ID_HiSeqV2_exon_PANCAN',
'_GENOMIC_ID_HiSeqV2_PANCAN',
'_GENOMIC_ID_TCGA_PANCAN_mutation',
'_GENOMIC_ID_TCGA_PANCAN_HumanMethylation27',
'_GENOMIC_ID_TCGA_PANCAN_mutation_ucsc_mafgenelevel',
'_GENOMIC_ID_TCGA_PANCAN_mutation_broadgenelevel',
'_GENOMIC_ID_TCGA_PANCAN_mutation_wustlgenelevel',
'_GENOMIC_ID_TCGA_PANCAN_gistic2_threshold',
'_GENOMIC_ID_TCGA_PANCAN_HumanMethylation450',
'_GENOMIC_ID_TCGA_PANCAN_mutation_bcgscgenelevel',
'_GENOMIC_ID_TCGA_PANCAN_miRNA_GA_gene')] <- NULL
# Remove Patient ID / Sample type ID / Cohort ID / SampleID / INTEGRATION
# Motivo: IDÃÂ´s
dados[c("_PATIENT", "_cohort", "sample_type_id", "sampleID", "_INTEGRATION")] <- NULL
# Remove  _RFS, _RFS_UNIT _RFS_IND and _TIME_TO_EVENT
# Motivo: Mesmo significado das variaveis OSÃÂ´s
dados[c("_RFS", "_RFS_UNIT", "_RFS_IND", "_OS_UNIT",
"_TIME_TO_EVENT", "_TIME_TO_EVENT_UNIT")] <- NULL
# Remove OS IND
# Motivo: Duplicado do EVENT
# 12400 valores iguais
sum(dados$`_OS_IND`[!is.na(dados$`_OS_IND`)] == dados$`_EVENT`[!is.na(dados$`_EVENT`)])
# 410 NAÃÂ´s
table(is.na(dados$`_OS_IND`))
dados$`_OS_IND` <- NULL
# 8 VariÃÂ¡veis Finais
length(names(dados))
# ----------------- 2. ANALISE VariÃÂ¡veis isoladas ------------------------
names(dados) <- c('event','os','disease','site','age_ini','gender','sample_type')
summary(dados)
# Q() regularized gamma function and G() --------------------------------------------
Q <- function(a,b){
pgamma(b, a, lower=FALSE)*gamma(a)/gamma(a)
}
G <- function(a,b,c){
b^(a*c)*exp(-b^c)/pgamma(b^c, a, lower=FALSE)
}
# calculo numerico derivada PSI() -------------------------------------------
PSI1 <- function(a,b,c, h){
(log(pgamma(b^c, a, lower=FALSE))*gamma(a) - log(pgamma(b^c, a+h, lower=FALSE))*gamma(a+h))/h
}
PSI2 <- function(a,b,c, h){
(log(pgamma(b^c, a, lower=FALSE))*gamma(a) - log(pgamma((b+h)^c, a, lower=FALSE))*gamma(a))/h
}
PSI3 <- function(a,b,c, h){
(log(pgamma(b^c, a, lower=FALSE))*gamma(a) - log(pgamma(b^(c+h), a, lower=FALSE))*gamma(a))/h
}
# interacoes para estimativa dos parametros -------------------------------
# dados do problema
t = dados$os/365
t = t[!is.na(t)]
t = t[t>0]
delta = rep(1,length(t))
c = rep(0,length(t))
# censura aleatoria
i = 1
frac = 0
while (frac < 0.3){
while (frac < 0.3){
;
''
''
""
""
''
''
delta[i] = ifelse(t[i]<=c[i],1,0)
t[i] = min(t[i], c[i])
c
c
c
cc
c
;
?
# ----------------------   1. Base Geral    ---------------
#                                                         #
dados =  read_delim("Bases/PANCAN_clinicalMatrix", "\t", escape_double = FALSE, trim_ws = TRUE)
nrow(dados)
length(names(dados))
# Remove paper publication data
dados[c('_PANCAN_CNA_PANCAN_K8',
'_PANCAN_Cluster_Cluster_PANCAN',
'_PANCAN_DNAMethyl_PANCAN',
'_PANCAN_RPPA_PANCAN_K8',
'_PANCAN_UNC_RNAseq_PANCAN_K16',
'_PANCAN_miRNA_PANCAN',
'_PANCAN_mutation_PANCAN')] <- NULL
# Remove IDÃÂ´s relation with other datasets
dados[c('_GENOMIC_ID_TCGA_PANCAN_gistic2',
'_GENOMIC_ID_TCGA_PANCAN_paradigm',
'_GENOMIC_ID_TCGA_PANCAN_mutation_bcmgenelevel',
'_GENOMIC_ID_TCGA_PANCAN_miRNA_HiSeq_gene',
'_GENOMIC_ID_HiSeqV2_exon_PANCAN',
'_GENOMIC_ID_HiSeqV2_PANCAN',
'_GENOMIC_ID_TCGA_PANCAN_mutation',
'_GENOMIC_ID_TCGA_PANCAN_HumanMethylation27',
'_GENOMIC_ID_TCGA_PANCAN_mutation_ucsc_mafgenelevel',
'_GENOMIC_ID_TCGA_PANCAN_mutation_broadgenelevel',
'_GENOMIC_ID_TCGA_PANCAN_mutation_wustlgenelevel',
'_GENOMIC_ID_TCGA_PANCAN_gistic2_threshold',
'_GENOMIC_ID_TCGA_PANCAN_HumanMethylation450',
'_GENOMIC_ID_TCGA_PANCAN_mutation_bcgscgenelevel',
'_GENOMIC_ID_TCGA_PANCAN_miRNA_GA_gene')] <- NULL
# Remove Patient ID / Sample type ID / Cohort ID / SampleID / INTEGRATION
# Motivo: IDÃÂ´s
dados[c("_PATIENT", "_cohort", "sample_type_id", "sampleID", "_INTEGRATION")] <- NULL
# Remove  _RFS, _RFS_UNIT _RFS_IND and _TIME_TO_EVENT
# Motivo: Mesmo significado das variaveis OSÃÂ´s
dados[c("_RFS", "_RFS_UNIT", "_RFS_IND", "_OS_UNIT",
"_TIME_TO_EVENT", "_TIME_TO_EVENT_UNIT")] <- NULL
# Remove OS IND
# Motivo: Duplicado do EVENT
# 12400 valores iguais
sum(dados$`_OS_IND`[!is.na(dados$`_OS_IND`)] == dados$`_EVENT`[!is.na(dados$`_EVENT`)])
# 410 NAÃÂ´s
table(is.na(dados$`_OS_IND`))
dados$`_OS_IND` <- NULL
# 8 VariÃÂ¡veis Finais
length(names(dados))
# ----------------- 2. ANALISE VariÃÂ¡veis isoladas ------------------------
names(dados) <- c('event','os','disease','site','age_ini','gender','sample_type')
summary(dados)
# Q() regularized gamma function and G() --------------------------------------------
Q <- function(a,b){
pgamma(b, a, lower=FALSE)*gamma(a)/gamma(a)
}
G <- function(a,b,c){
b^(a*c)*exp(-b^c)/pgamma(b^c, a, lower=FALSE)
}
# calculo numerico derivada PSI() -------------------------------------------
PSI1 <- function(a,b,c, h){
(log(pgamma(b^c, a, lower=FALSE))*gamma(a) - log(pgamma(b^c, a+h, lower=FALSE))*gamma(a+h))/h
}
PSI2 <- function(a,b,c, h){
(log(pgamma(b^c, a, lower=FALSE))*gamma(a) - log(pgamma((b+h)^c, a, lower=FALSE))*gamma(a))/h
}
PSI3 <- function(a,b,c, h){
(log(pgamma(b^c, a, lower=FALSE))*gamma(a) - log(pgamma(b^(c+h), a, lower=FALSE))*gamma(a))/h
}
# interacoes para estimativa dos parametros -------------------------------
# dados do problema
t = dados$os/365
t = t[!is.na(t)]
t = t[t>0]
delta = rep(1,length(t))
c = rep(0,length(t))
# censura aleatoria
i = 1
frac = 0
while (frac < 0.3){
print('indici i: ' + str(i))
/
;
# ----------------------   1. Base Geral    ---------------
#                                                         #
dados =  read_delim("Bases/PANCAN_clinicalMatrix", "\t", escape_double = FALSE, trim_ws = TRUE)
nrow(dados)
length(names(dados))
# Remove paper publication data
dados[c('_PANCAN_CNA_PANCAN_K8',
'_PANCAN_Cluster_Cluster_PANCAN',
'_PANCAN_DNAMethyl_PANCAN',
'_PANCAN_RPPA_PANCAN_K8',
'_PANCAN_UNC_RNAseq_PANCAN_K16',
'_PANCAN_miRNA_PANCAN',
'_PANCAN_mutation_PANCAN')] <- NULL
# Remove IDÃÂ´s relation with other datasets
dados[c('_GENOMIC_ID_TCGA_PANCAN_gistic2',
'_GENOMIC_ID_TCGA_PANCAN_paradigm',
'_GENOMIC_ID_TCGA_PANCAN_mutation_bcmgenelevel',
'_GENOMIC_ID_TCGA_PANCAN_miRNA_HiSeq_gene',
'_GENOMIC_ID_HiSeqV2_exon_PANCAN',
'_GENOMIC_ID_HiSeqV2_PANCAN',
'_GENOMIC_ID_TCGA_PANCAN_mutation',
'_GENOMIC_ID_TCGA_PANCAN_HumanMethylation27',
'_GENOMIC_ID_TCGA_PANCAN_mutation_ucsc_mafgenelevel',
'_GENOMIC_ID_TCGA_PANCAN_mutation_broadgenelevel',
'_GENOMIC_ID_TCGA_PANCAN_mutation_wustlgenelevel',
'_GENOMIC_ID_TCGA_PANCAN_gistic2_threshold',
'_GENOMIC_ID_TCGA_PANCAN_HumanMethylation450',
'_GENOMIC_ID_TCGA_PANCAN_mutation_bcgscgenelevel',
'_GENOMIC_ID_TCGA_PANCAN_miRNA_GA_gene')] <- NULL
# Remove Patient ID / Sample type ID / Cohort ID / SampleID / INTEGRATION
# Motivo: IDÃÂ´s
dados[c("_PATIENT", "_cohort", "sample_type_id", "sampleID", "_INTEGRATION")] <- NULL
# Remove  _RFS, _RFS_UNIT _RFS_IND and _TIME_TO_EVENT
# Motivo: Mesmo significado das variaveis OSÃÂ´s
dados[c("_RFS", "_RFS_UNIT", "_RFS_IND", "_OS_UNIT",
"_TIME_TO_EVENT", "_TIME_TO_EVENT_UNIT")] <- NULL
# Remove OS IND
# Motivo: Duplicado do EVENT
# 12400 valores iguais
sum(dados$`_OS_IND`[!is.na(dados$`_OS_IND`)] == dados$`_EVENT`[!is.na(dados$`_EVENT`)])
# 410 NAÃÂ´s
table(is.na(dados$`_OS_IND`))
dados$`_OS_IND` <- NULL
# 8 VariÃÂ¡veis Finais
length(names(dados))
# ----------------- 2. ANALISE VariÃÂ¡veis isoladas ------------------------
names(dados) <- c('event','os','disease','site','age_ini','gender','sample_type')
summary(dados)
# Q() regularized gamma function and G() --------------------------------------------
Q <- function(a,b){
pgamma(b, a, lower=FALSE)*gamma(a)/gamma(a)
}
G <- function(a,b,c){
b^(a*c)*exp(-b^c)/pgamma(b^c, a, lower=FALSE)
}
# calculo numerico derivada PSI() -------------------------------------------
PSI1 <- function(a,b,c, h){
(log(pgamma(b^c, a, lower=FALSE))*gamma(a) - log(pgamma(b^c, a+h, lower=FALSE))*gamma(a+h))/h
}
PSI2 <- function(a,b,c, h){
(log(pgamma(b^c, a, lower=FALSE))*gamma(a) - log(pgamma((b+h)^c, a, lower=FALSE))*gamma(a))/h
}
PSI3 <- function(a,b,c, h){
(log(pgamma(b^c, a, lower=FALSE))*gamma(a) - log(pgamma(b^(c+h), a, lower=FALSE))*gamma(a))/h
}
# interacoes para estimativa dos parametros -------------------------------
# dados do problema
t = dados$os/365
t = t[!is.na(t)]
t = t[t>0]
delta = rep(1,length(t))
c = rep(0,length(t))
# censura aleatoria
i = 1
frac = 0
while (frac < 0.3){
c[i] = runif(1, min(t), max(t))
delta[i] = ifelse(t[i]<=c[i],1,0)
t[i] = min(t[i], c[i])
#frac = sum(delta==0)/length(t)
print('soma de zeros: ' + str(sum(delta==0)))
print('indici i: ' + str(i))
i = i + 1
i = ifelse(i==length(t),1,i)
}
1
str(1)
pint('')
pint(1)
print(1)
print('luiz :' + 1)
print('luiz :' + str(1))
print(c('luiz :',1))
# ----------------------   1. Base Geral    ---------------
#                                                         #
dados =  read_delim("Bases/PANCAN_clinicalMatrix", "\t", escape_double = FALSE, trim_ws = TRUE)
nrow(dados)
length(names(dados))
# Remove paper publication data
dados[c('_PANCAN_CNA_PANCAN_K8',
'_PANCAN_Cluster_Cluster_PANCAN',
'_PANCAN_DNAMethyl_PANCAN',
'_PANCAN_RPPA_PANCAN_K8',
'_PANCAN_UNC_RNAseq_PANCAN_K16',
'_PANCAN_miRNA_PANCAN',
'_PANCAN_mutation_PANCAN')] <- NULL
# Remove IDÃÂ´s relation with other datasets
dados[c('_GENOMIC_ID_TCGA_PANCAN_gistic2',
'_GENOMIC_ID_TCGA_PANCAN_paradigm',
'_GENOMIC_ID_TCGA_PANCAN_mutation_bcmgenelevel',
'_GENOMIC_ID_TCGA_PANCAN_miRNA_HiSeq_gene',
'_GENOMIC_ID_HiSeqV2_exon_PANCAN',
'_GENOMIC_ID_HiSeqV2_PANCAN',
'_GENOMIC_ID_TCGA_PANCAN_mutation',
'_GENOMIC_ID_TCGA_PANCAN_HumanMethylation27',
'_GENOMIC_ID_TCGA_PANCAN_mutation_ucsc_mafgenelevel',
'_GENOMIC_ID_TCGA_PANCAN_mutation_broadgenelevel',
'_GENOMIC_ID_TCGA_PANCAN_mutation_wustlgenelevel',
'_GENOMIC_ID_TCGA_PANCAN_gistic2_threshold',
'_GENOMIC_ID_TCGA_PANCAN_HumanMethylation450',
'_GENOMIC_ID_TCGA_PANCAN_mutation_bcgscgenelevel',
'_GENOMIC_ID_TCGA_PANCAN_miRNA_GA_gene')] <- NULL
# Remove Patient ID / Sample type ID / Cohort ID / SampleID / INTEGRATION
# Motivo: IDÃÂ´s
dados[c("_PATIENT", "_cohort", "sample_type_id", "sampleID", "_INTEGRATION")] <- NULL
# Remove  _RFS, _RFS_UNIT _RFS_IND and _TIME_TO_EVENT
# Motivo: Mesmo significado das variaveis OSÃÂ´s
dados[c("_RFS", "_RFS_UNIT", "_RFS_IND", "_OS_UNIT",
"_TIME_TO_EVENT", "_TIME_TO_EVENT_UNIT")] <- NULL
# Remove OS IND
# Motivo: Duplicado do EVENT
# 12400 valores iguais
sum(dados$`_OS_IND`[!is.na(dados$`_OS_IND`)] == dados$`_EVENT`[!is.na(dados$`_EVENT`)])
# 410 NAÃÂ´s
table(is.na(dados$`_OS_IND`))
dados$`_OS_IND` <- NULL
# 8 VariÃÂ¡veis Finais
length(names(dados))
# ----------------- 2. ANALISE VariÃÂ¡veis isoladas ------------------------
names(dados) <- c('event','os','disease','site','age_ini','gender','sample_type')
summary(dados)
# Q() regularized gamma function and G() --------------------------------------------
Q <- function(a,b){
pgamma(b, a, lower=FALSE)*gamma(a)/gamma(a)
}
G <- function(a,b,c){
b^(a*c)*exp(-b^c)/pgamma(b^c, a, lower=FALSE)
}
# calculo numerico derivada PSI() -------------------------------------------
PSI1 <- function(a,b,c, h){
(log(pgamma(b^c, a, lower=FALSE))*gamma(a) - log(pgamma(b^c, a+h, lower=FALSE))*gamma(a+h))/h
}
PSI2 <- function(a,b,c, h){
(log(pgamma(b^c, a, lower=FALSE))*gamma(a) - log(pgamma((b+h)^c, a, lower=FALSE))*gamma(a))/h
}
PSI3 <- function(a,b,c, h){
(log(pgamma(b^c, a, lower=FALSE))*gamma(a) - log(pgamma(b^(c+h), a, lower=FALSE))*gamma(a))/h
}
# interacoes para estimativa dos parametros -------------------------------
# dados do problema
t = dados$os/365
t = t[!is.na(t)]
t = t[t>0]
delta = rep(1,length(t))
c = rep(0,length(t))
# censura aleatoria
i = 1
frac = 0
while (frac < 0.3){
c[i] = runif(1, min(t), max(t))
delta[i] = ifelse(t[i]<=c[i],1,0)
t[i] = min(t[i], c[i])
#frac = sum(delta==0)/length(t)
print(c('soma de zeros: ',sum(delta==0)))
print(c('indici i: ', i))
i = i + 1
i = ifelse(i==length(t),1,i)
}
randcensor
library(randcensor)
install.packages("LindleyR")
library(LindleyR)
randcensor
# censura aleatoria
x <- randcensor(n = length(t), pcens = 0.2, timedistr = 'lnorm', censordistr = 'unif', meanlog = 1, sdlog = 1)
x
table(x$data['delta']) / 100
View(x)
View(x)
length(x)
x
x$data
x$data$time
max(x$data$time)
min(x$data$time)
min(t)
max(t)
max(t)
summary(t)
# dados do problema
t = dados$os/365
t = t[!is.na(t)]
t = t[t>0]
summary(t)
max(t)
x <- randcensor(n = length(t), pcens = 0.4, timedistr = 'lnorm', censordistr = 'unif', meanlog = 1, sdlog = 1)
min(x$data$time)
max(x$data$time)
max(x$data$time)
# censura aleatoria
x <- randcensor(n = length(t), pcens = 0.1, timedistr = 'lnorm', censordistr = 'unif', meanlog = 1, sdlog = 1)
max(x$data$time)
# censura aleatoria
x <- randcensor(n = length(t), pcens = 0.1, timedistr = 'lnorm', censordistr = 'unif', meanlog = 1, sdlog = 1)
# censura aleatoria
x <- randcensor(n = length(t), pcens = 0.2, timedistr = 'lnorm', censordistr = 'unif', meanlog = 1, sdlog = 1)
max(x$data$time)
# censura aleatoria
x <- randcensor(n = length(t), pcens = 0.25, timedistr = 'lnorm', censordistr = 'unif', meanlog = 1, sdlog = 1)
max(x$data$time)
# censura aleatoria
x <- randcensor(n = length(t), pcens = 0.25, timedistr = 'lnorm', censordistr = 'unif', meanlog = 1, sdlog = 1)
max(x$data$time)
# censura aleatoria
x <- randcensor(n = length(t), pcens = 0.25, timedistr = 'lnorm', censordistr = 'unif', meanlog = 1, sdlog = 1)
max(x$data$time)
# censura aleatoria
x <- randcensor(n = length(t), pcens = 0.15, timedistr = 'lnorm', censordistr = 'unif', meanlog = 1, sdlog = 1)
max(x$data$time)
max(t)
# censura aleatoria
x <- randcensor(n = length(t), pcens = 0.14, timedistr = 'lnorm', censordistr = 'unif', meanlog = 1, sdlog = 1)
max(x$data$time)
length(t)
length(x$data$time)
# censura aleatoria
x <- randcensor(n = 100, pcens = 0.14, timedistr = 'lnorm', censordistr = 'unif', meanlog = 1, sdlog = 1)
max(x$data$time)
# censura aleatoria
x <- randcensor(n = 100, pcens = 0.14, timedistr = 'lnorm', censordistr = 'unif', meanlog = 1, sdlog = 1)
max(x$data$time)
# censura aleatoria
x <- randcensor(n = 100, pcens = 0.14, timedistr = 'lnorm', censordistr = 'unif', meanlog = 1, sdlog = 1)
max(x$data$time)
# censura aleatoria
x <- randcensor(n = 100, pcens = 0.14, timedistr = 'lnorm', censordistr = 'unif', meanlog = 1, sdlog = 1)
max(x$data$time)
# censura aleatoria
x <- randcensor(n = 100, pcens = 0.14, timedistr = 'lnorm', censordistr = 'unif', meanlog = 1, sdlog = 1)
max(x$data$time)
# censura aleatoria
x <- randcensor(n = 100, pcens = 0.14, timedistr = 'lnorm', censordistr = 'unif', meanlog = 1, sdlog = 1)
max(x$data$time)
inverse(f, lower = -Inf, upper = Inf)
library(binsmooth)
install(binsmooth)
package.install(binsmooth)
install.packages(binsmooth)
install.packages("binsmooth)
install.packages("binsmooth)
install.packages("binsmooth")
library(binsmooth)
inverse(f, lower = -Inf, upper = Inf)
library(binsmooth)
inverse(f, lower = -Inf, upper = Inf)
library(GoFKernel)
install.packages("GoFKernel")
GoFKernel
library(GoFKernel)
inverse(f, lower = -Inf, upper = Inf)
inverse(f, lower = -Inf, upper = Inf)
f = expression((1-Pi)*Alpha*Lambda^(Alpha*Phi)*t^(Alpha*Phi-1)*(Lambda+(Lambda*t)^Alpha)*exp(-(Lambda*t)^Alpha)/(Lambda+Phi)*gamma(Phi))
inverse(f, lower = -Inf, upper = Inf)
Phi = 1.01463860
f <- function(t){
Alpha = 1.20171864
Lambda = 1.30974591
Phi = 1.01463860
Pi = 0.07138956
return (1-Pi)*Alpha*Lambda^(Alpha*Phi)*t^(Alpha*Phi-1)*(Lambda+(Lambda*t)^Alpha)*exp(-(Lambda*t)^Alpha)/(Lambda+Phi)*gamma(Phi)
}
inverse(f, lower = -Inf, upper = Inf)
inverse(f, lower = -Inf, upper = Inf)
f.inv = inverse(f, lower = -Inf, upper = Inf)
f.inv(0.2)
f.inv(0.10)
f.inv(1)
f
f(1)
f(0.4)
f(10)
f(0.1)
f(100000)
f(0)
f <- function(t){
Alpha = 1.20171864
Lambda = 1.30974591
Phi = 1.01463860
Pi = 0.5
return (1-Pi)*Alpha*Lambda^(Alpha*Phi)*t^(Alpha*Phi-1)*(Lambda+(Lambda*t)^Alpha)*exp(-(Lambda*t)^Alpha)/(Lambda+Phi)*gamma(Phi)
}
f(0)
f(1)
f(0.1)
f <- function(t){
Alpha = 1.20171864
Lambda = 1.30974591
Phi = 1.01463860
Pi = 0.5
(1-Pi)*Alpha*Lambda^(Alpha*Phi)*t^(Alpha*Phi-1)*(Lambda+(Lambda*t)^Alpha)*exp(-(Lambda*t)^Alpha)/(Lambda+Phi)*gamma(Phi)
}
f(0.1)
f(0)
f(1)
f(10)
f.inv = inverse(f, lower = -Inf, upper = Inf)
f.inv(.2)
f.inv(0.2)
f.inv(1)
f.inv(10)
f.inv = inverse(f, lower = 0, upper = 1)
f.inv(10)
f.inv(1)
f.inv(0.1)
f.inv(0.2)
f.inv(0.9)
f.inv(0.8)
f.inv(0.5)
f.inv(0.4)
f.inv(0.1)
f.inv(0.2)
f.inv(0.3)
f.inv(2)
f.inv(10)
